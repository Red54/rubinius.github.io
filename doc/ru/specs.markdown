---
layout: doc_ru
title: Спецификации
previous: Глобальные переменные
previous_url: ruby/global-variables
next: Compiler
next_url: specs/compiler
---

Для управления процессом разработки в проекте Rubinius активно используются
исполняемые спецификации в стиле [TDD][1]/[BDD][2]. Директория `spec` проекта не
без умысла разделена на две части:

  1. файлы в `spec/ruby` --- описывают поведение традиционной реализации
     от Мацумото;
  2. все остальные файлы в директории `spec` --- описывают поведение Rubinius.

Спеки[<sup>1</sup>](#spec) в `spec/ruby` ---
сбойные помечаются таким образом, что CI-процесс[<sup>2</sup>](#ci)  всегда
имеет доступ к набору проверенных валидных спецификаций. Такой подход
позволяет легко удостовериться, что изменения в коде Rubinius не ведут к
регрессиям.

Когда Вы станете писать для Rubinius спеки и соответствующий им код, соблюдайте следующий
порядок:

  1. Напишите <<сбойный>> спек для определенного поведения Ruby. Закоммитьте
     его в отдельный коммит в подходящем месте в `spec/ruby`.
  2. Создайте код для Rubinius, при выполнении которого спек <<пойдет>>. Затем
     снова закоммитьте: этот коммит должен быть отличным от первого,
     содержащего сам спек.
  3. Запустите `rake`, чтобы убедиться, что все CI-спеки выполняются успешно.

#### Примечания
1. [_Спек_{: #spec}][4] -- от сокр. англ. <<spec>>, спецификация.
2. [_CI_{: #ci}][5] -- утилита системы непрерывной интеграции.

[1]: http://ru.wikipedia.org/wiki/%D0%A0%D0%B0%D0%B7%D1%80%D0%B0%D0%B1%D0%BE%D1%82%D0%BA%D0%B0_%D1%87%D0%B5%D1%80%D0%B5%D0%B7_%D1%82%D0%B5%D1%81%D1%82%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5 "Разработка через тестирование"
[2]: http://en.wikipedia.org/wiki/Behavior_Driven_Development "Разработка через определение поведения"
[4]: http://relishapp.com/rspec
[5]: http://ru.wikipedia.org/wiki/%D0%9D%D0%B5%D0%BF%D1%80%D0%B5%D1%80%D1%8B%D0%B2%D0%BD%D0%B0%D1%8F_%D0%B8%D0%BD%D1%82%D0%B5%D0%B3%D1%80%D0%B0%D1%86%D0%B8%D1%8F
